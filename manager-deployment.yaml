# manager-deployment.yaml

# 1. The ServiceAccount your app will use
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-mining-backend-sa
  namespace: default
---
# 2. The Role defining permissions (what it can do)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cloud-mining-backend-role # <--- This is the correct name
  namespace: default
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["create", "get", "list", "delete"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["create", "get", "list", "delete"]
# Add other resources here if you add IngressRouteTCPs, etc.
# - apiGroups: ["traefik.io"]
#   resources: ["ingressroutetcps"]
#   verbs: ["create", "get", "list", "delete"]
---
# 3. The RoleBinding to grant the permissions to the ServiceAccount
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cloud-mining-backend-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: cloud-mining-backend-sa
roleRef:
  kind: Role
  name: cloud-mining-backend-role # <--- THIS NAME NOW CORRECTLY MATCHES THE ROLE ABOVE
  apiGroup: rbac.authorization.k8s.io
---
# 4. The Deployment to run your Go application pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloud-mining-backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloud-mining-backend
  template:
    metadata:
      labels:
        app: cloud-mining-backend
    spec:
      serviceAccountName: cloud-mining-backend-sa # Use the ServiceAccount with permissions
      containers:
      - name: manager
        # IMPORTANT: Replace this with your actual Docker image
        image: luisadaoipl/cloud-mining-backend
        ports:
        - containerPort: 3000
---
# 5. The Service to expose your Go app's API
apiVersion: v1
kind: Service
metadata:
  name: cloud-mining-backend-service
spec:
  type: LoadBalancer # K3s comes with a basic LoadBalancer
  selector:
    app: cloud-mining-backend
  ports:
  - protocol: TCP
    port: 80 # Expose the service on port 80
    targetPort: 3000 # Forward traffic to your app's container port 3000